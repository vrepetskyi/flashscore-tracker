datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

generator client {
  provider = "prisma-client-js"
}

// From my experience, it is better not to normalize the database too early.
// When a project is fresh, many requirements may change in the process.
// Premature optimization in form of database normalization is a complication in such cases.

model Match {
  matchId       String    @id
  date          DateTime
  league        String
  home          String
  guest         String
  firstScrapeAt DateTime
  lastScrapeAt  DateTime
  oddsSets      OddsSet[]
  isUpToDate    Boolean   @default(true) // Represents whether the last scraping have found this match.

  @@index([league])
}

model OddsSet {
  oddsSetId Int      @id @default(autoincrement())
  bookmaker String
  oddsHome  Float
  oddsDraw  Float
  oddsGuest Float
  scrapeAt  DateTime @default(now())
  matchId   String
  match     Match    @relation(fields: [matchId], references: [matchId], onDelete: Cascade)

  // While scraping the data, I have noticed that the odds also depend on location of the user.
  // Comparison of odds for various regions may be added in the future as an additional feature.

  // geoCode            String 
  // geoSubdivisionCode String

  @@index([bookmaker])
}
